import subprocess
import os
import sys
import getpass
import re
import ctypes

class UserManager:
    def __init__(self):
        self.request_admin_privileges()
    
    def is_admin(self):
        """Verifica se o script est√° sendo executado com privil√©gios de administrador"""
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False
    
    def request_admin_privileges(self):
        """Solicita privil√©gios de administrador automaticamente"""
        if not self.is_admin():
            print("üîí Solicitando privil√©gios de administrador...")
            print("   Clique 'Sim' na janela do UAC que vai aparecer.")
            
            try:
                # Re-executa o script com privil√©gios de admin
                ctypes.windll.shell32.ShellExecuteW(
                    None, 
                    "runas", 
                    sys.executable, 
                    " ".join([f'"{arg}"' for arg in sys.argv]), 
                    None, 
                    1
                )
                sys.exit(0)  # Encerra a inst√¢ncia atual
            except Exception as e:
                print(f"‚ùå Falha ao solicitar privil√©gios de administrador: {e}")
                print("   Execute manualmente como administrador.")
                input("‚è∏Ô∏è  Pressione Enter para continuar mesmo assim...")
        else:
            print("‚úÖ Executando com privil√©gios de administrador!")
    
    def run_command(self, command, description=""):
        """Executa um comando e trata os resultados"""
        try:
            print(f"üîÑ {description}")
            result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='cp850')
            
            if result.returncode == 0:
                print("‚úÖ Opera√ß√£o realizada com sucesso!")
                if result.stdout.strip():
                    print(f"üìã Output: {result.stdout.strip()}")
                return True
            else:
                print(f"‚ùå Erro na opera√ß√£o (C√≥digo: {result.returncode})")
                if result.stderr.strip():
                    print(f"üîç Detalhes do erro: {result.stderr.strip()}")
                return False
                
        except Exception as e:
            print(f"üí• Falha ao executar o comando: {e}")
            return False
    
    def validate_username(self, username):
        """Valida o nome de usu√°rio"""
        if not username or len(username.strip()) == 0:
            print("‚ùå Nome de usu√°rio n√£o pode estar vazio!")
            return False
        
        # Caracteres n√£o permitidos no Windows
        invalid_chars = r'["/\[\]:;|=,+*?<>]'
        if re.search(invalid_chars, username):
            print("‚ùå Nome de usu√°rio cont√©m caracteres inv√°lidos!")
            return False
        
        if len(username) > 20:
            print("‚ùå Nome de usu√°rio muito longo (m√°ximo 20 caracteres)!")
            return False
            
        return True
    
    def validate_password(self, password):
        """Valida a senha (crit√©rios b√°sicos)"""
        if len(password) < 6:
            print("‚ùå Senha deve ter pelo menos 6 caracteres!")
            return False
        return True
    
    def user_exists(self, username):
        """Verifica se o usu√°rio existe"""
        result = subprocess.run(f'net user {username}', shell=True, capture_output=True, text=True)
        return result.returncode == 0
    
    def add_user(self):
        """Cria um novo usu√°rio"""
        print("\nüìù === CRIAR USU√ÅRIO ===")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        if self.user_exists(username):
            print(f"‚ö†Ô∏è  Usu√°rio '{username}' j√° existe!")
            return
        
        password = getpass.getpass("üîí Senha (n√£o ser√° exibida): ")
        if not self.validate_password(password):
            return
        
        confirm_password = getpass.getpass("üîí Confirme a senha: ")
        if password != confirm_password:
            print("‚ùå Senhas n√£o coincidem!")
            return
        
        full_name = input("üìã Nome completo (opcional): ").strip()
        
        command = f'net user "{username}" "{password}" /add'
        if full_name:
            command += f' /fullname:"{full_name}"'
        
        self.run_command(command, f"Criando usu√°rio '{username}'...")
    
    def delete_user(self):
        """Exclui um usu√°rio"""
        print("\nüóëÔ∏è  === EXCLUIR USU√ÅRIO ===")
        
        username = input("üë§ Nome do usu√°rio a excluir: ").strip()
        if not self.validate_username(username):
            return
        
        if not self.user_exists(username):
            print(f"‚ùå Usu√°rio '{username}' n√£o existe!")
            return
        
        # Confirma√ß√£o de seguran√ßa
        confirm = input(f"‚ö†Ô∏è  Tem certeza que deseja excluir o usu√°rio '{username}'? (sim/n√£o): ").lower()
        if confirm not in ['sim', 's', 'yes', 'y']:
            print("üö´ Opera√ß√£o cancelada.")
            return
        
        self.run_command(f'net user "{username}" /delete', f"Excluindo usu√°rio '{username}'...")
    
    def add_to_admins(self):
        """Adiciona usu√°rio ao grupo de administradores"""
        print("\nüëë === ADICIONAR AO GRUPO ADMINISTRADORES ===")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        if not self.user_exists(username):
            print(f"‚ùå Usu√°rio '{username}' n√£o existe!")
            return
        
        # Tenta ambos os nomes do grupo (portugu√™s e ingl√™s)
        commands = [
            f'net localgroup Administradores "{username}" /add',
            f'net localgroup Administrators "{username}" /add'
        ]
        
        success = False
        for cmd in commands:
            if self.run_command(cmd, f"Adicionando '{username}' aos administradores..."):
                success = True
                break
        
        if not success:
            print("‚ùå Falha ao adicionar ao grupo de administradores. Verifique o nome do grupo no sistema.")
    
    def remove_from_admins(self):
        """Remove usu√°rio do grupo de administradores"""
        print("\nüë§ === REMOVER DO GRUPO ADMINISTRADORES ===")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        if not self.user_exists(username):
            print(f"‚ùå Usu√°rio '{username}' n√£o existe!")
            return
        
        # Tenta ambos os nomes do grupo
        commands = [
            f'net localgroup Administradores "{username}" /delete',
            f'net localgroup Administrators "{username}" /delete'
        ]
        
        success = False
        for cmd in commands:
            if self.run_command(cmd, f"Removendo '{username}' dos administradores..."):
                success = True
                break
        
        if not success:
            print("‚ùå Falha ao remover do grupo de administradores.")
    
    def force_password_change(self):
        """For√ßa troca de senha no pr√≥ximo login"""
        print("\nüîÑ === FOR√áAR TROCA DE SENHA ===")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        if not self.user_exists(username):
            print(f"‚ùå Usu√°rio '{username}' n√£o existe!")
            return
        
        self.run_command(
            f'net user "{username}" /logonpasswordchg:yes',
            f"For√ßando troca de senha para '{username}'..."
        )
    
    def delete_user_profile(self):
        """Remove pasta do perfil do usu√°rio"""
        print("\nüìÅ === REMOVER PASTA DO PERFIL ===")
        print("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL!")
        print("   Todos os dados do perfil ser√£o perdidos permanentemente.")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        profile_path = f"C:\\Users\\{username}"
        
        if not os.path.exists(profile_path):
            print(f"‚ùå Pasta do perfil n√£o encontrada: {profile_path}")
            return
        
        # Dupla confirma√ß√£o para opera√ß√£o perigosa
        print(f"üìÇ Pasta encontrada: {profile_path}")
        confirm1 = input("‚ö†Ô∏è  Digite 'CONFIRMAR' para prosseguir: ").upper()
        if confirm1 != "CONFIRMAR":
            print("üö´ Opera√ß√£o cancelada.")
            return
        
        confirm2 = input("‚ö†Ô∏è  Tem absoluta certeza? Digite 'SIM' para confirmar: ").upper()
        if confirm2 != "SIM":
            print("üö´ Opera√ß√£o cancelada.")
            return
        
        self.run_command(
            f'rmdir /s /q "{profile_path}"',
            f"Removendo pasta do perfil de '{username}'..."
        )
    
    def list_users(self):
        """Lista todos os usu√°rios do sistema"""
        print("\nüìã === USU√ÅRIOS DO SISTEMA ===")
        self.run_command('net user', "Listando usu√°rios do sistema...")
    
    def show_user_info(self):
        """Mostra informa√ß√µes detalhadas de um usu√°rio"""
        print("\nüìä === INFORMA√á√ïES DO USU√ÅRIO ===")
        
        username = input("üë§ Nome do usu√°rio: ").strip()
        if not self.validate_username(username):
            return
        
        self.run_command(f'net user "{username}"', f"Obtendo informa√ß√µes de '{username}'...")
    
    def menu(self):
        """Menu principal do programa"""
        while True:
            print("\n" + "="*50)
            print("üêç GERENCIADOR DE USU√ÅRIOS WINDOWS")
            print("="*50)
            print("[1] üë§ Criar usu√°rio")
            print("[2] üóëÔ∏è  Excluir usu√°rio")
            print("[3] üëë Adicionar ao grupo de administradores")
            print("[4] üë§ Remover do grupo de administradores")
            print("[5] üîÑ For√ßar troca de senha no pr√≥ximo login")
            print("[6] üìÅ Apagar pasta do perfil do usu√°rio")
            print("[7] üìã Listar usu√°rios do sistema")
            print("[8] üìä Mostrar informa√ß√µes de usu√°rio")
            print("[0] üö™ Sair")
            print("-" * 50)
            
            try:
                opcao = input("üéØ Escolha uma op√ß√£o: ").strip()
                
                if opcao == "1":
                    self.add_user()
                elif opcao == "2":
                    self.delete_user()
                elif opcao == "3":
                    self.add_to_admins()
                elif opcao == "4":
                    self.remove_from_admins()
                elif opcao == "5":
                    self.force_password_change()
                elif opcao == "6":
                    self.delete_user_profile()
                elif opcao == "7":
                    self.list_users()
                elif opcao == "8":
                    self.show_user_info()
                elif opcao == "0":
                    print("üëã Encerrando o gerenciador...")
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    
                input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
                
            except KeyboardInterrupt:
                print("\n\nüõë Programa interrompido pelo usu√°rio.")
                break
            except Exception as e:
                print(f"üí• Erro inesperado: {e}")
                input("‚è∏Ô∏è  Pressione Enter para continuar...")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando Gerenciador de Usu√°rios Windows...")
    
    # Verifica se est√° no Windows
    if os.name != 'nt':
        print("‚ùå Este script foi desenvolvido para Windows.")
        return
    
    try:
        manager = UserManager()
        manager.menu()
    except Exception as e:
        print(f"üí• Erro fatal: {e}")
        input("‚è∏Ô∏è  Pressione Enter para sair...")

if __name__ == "__main__":
    main()